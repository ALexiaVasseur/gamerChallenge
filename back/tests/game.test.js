import { Game } from "../models/index.js";
import { sequelize } from "../models/sequelize-client.js";

beforeAll(async () => {
  await sequelize.sync({ force: true }); // R√©initialise la DB avant tous les tests
});

afterAll(async () => {
  await sequelize.close(); // Ferme la connexion √† la base de donn√©es apr√®s les tests
});

describe("üéÆ Game Model", () => {

  it("‚úÖ Devrait cr√©er un nouveau jeu", async () => {
    const game = await Game.create({
      title: "New Game",
      description: "A great game",
      genre: "Action",
      url_video_game: "https://example.com/game"
    });

    expect(game.id).toBeDefined();
    expect(game.title).toBe("New Game");
    expect(game.genre).toBe("Action");
  });

  it("‚ùå Ne devrait pas permettre un genre vide", async () => {
    await expect(
      Game.create({
        title: "Invalid Game",
        description: "This game has no genre",
        genre: "",  // Genre vide
        url_video_game: "https://example.com/game"
      })
    ).rejects.toThrowError("Le genre ne peut pas √™tre vide");
  });

  it("‚ùå Ne devrait pas autoriser des titres de jeux en double", async () => {
    const title = "Duplicate Game";
    await Game.create({
      title: title,
      description: "First game with this title",
      genre: "Action",
      url_video_game: "https://example.com/game"
    });
  
    await expect(
      Game.create({
        title: title,  // Titre dupliqu√©
        description: "Second game with this title",
        genre: "Adventure",
        url_video_game: "https://example.com/second-game"
      })
    ).rejects.toThrowError("la valeur d'une cl√© dupliqu√©e rompt la contrainte unique ¬´ games_title_key ¬ª");
  });
  

  it("‚ùå Ne devrait pas permettre un titre vide", async () => {
    await expect(
      Game.create({
        title: "",  // Titre vide
        description: "A game without a title",
        genre: "Action",
        url_video_game: "https://example.com/invalid-game"
      })
    ).rejects.toThrowError("Validation error: Le titre ne peut pas √™tre vide");
  });
  

  it("‚úÖ Devrait permettre un jeu sans URL vid√©o (champ optionnel)", async () => {
    const game = await Game.create({
      title: "Game Without URL",
      description: "This game has no URL",
      genre: "Puzzle"
    });

    expect(game.url_video_game).toBeNull(); // URL vid√©o est optionnelle
  });

});
